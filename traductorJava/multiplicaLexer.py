# Generated from multiplica.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,79,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,1,0,4,0,31,8,0,11,0,12,0,32,1,1,4,1,36,8,1,11,1,12,1,37,1,2,
        4,2,41,8,2,11,2,12,2,42,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,
        11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,0,0,14,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,1,0,
        3,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,81,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,30,1,0,0,0,3,35,1,0,0,0,5,40,
        1,0,0,0,7,46,1,0,0,0,9,48,1,0,0,0,11,50,1,0,0,0,13,52,1,0,0,0,15,
        54,1,0,0,0,17,58,1,0,0,0,19,65,1,0,0,0,21,67,1,0,0,0,23,69,1,0,0,
        0,25,71,1,0,0,0,27,77,1,0,0,0,29,31,7,0,0,0,30,29,1,0,0,0,31,32,
        1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,2,1,0,0,0,34,36,7,1,0,0,35,
        34,1,0,0,0,36,37,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,4,1,0,0,
        0,39,41,7,2,0,0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,
        1,0,0,0,43,44,1,0,0,0,44,45,6,2,0,0,45,6,1,0,0,0,46,47,5,40,0,0,
        47,8,1,0,0,0,48,49,5,41,0,0,49,10,1,0,0,0,50,51,5,58,0,0,51,12,1,
        0,0,0,52,53,5,44,0,0,53,14,1,0,0,0,54,55,5,68,0,0,55,56,5,101,0,
        0,56,57,5,102,0,0,57,16,1,0,0,0,58,59,5,82,0,0,59,60,5,101,0,0,60,
        61,5,116,0,0,61,62,5,117,0,0,62,63,5,114,0,0,63,64,5,110,0,0,64,
        18,1,0,0,0,65,66,5,61,0,0,66,20,1,0,0,0,67,68,5,42,0,0,68,22,1,0,
        0,0,69,70,5,45,0,0,70,24,1,0,0,0,71,72,5,112,0,0,72,73,5,114,0,0,
        73,74,5,105,0,0,74,75,5,110,0,0,75,76,5,116,0,0,76,26,1,0,0,0,77,
        78,5,10,0,0,78,28,1,0,0,0,4,0,32,37,42,1,6,0,0
    ]

class multiplicaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER = 1
    ID = 2
    WS = 3
    LPAREN = 4
    RPAREN = 5
    COLON = 6
    COMMA = 7
    DEF = 8
    RETURN = 9
    EQ = 10
    MULT = 11
    MINUS = 12
    PRINT = 13
    NEWLINE = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "':'", "','", "'Def'", "'Return'", "'='", "'*'", 
            "'-'", "'print'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "ID", "WS", "LPAREN", "RPAREN", "COLON", "COMMA", 
            "DEF", "RETURN", "EQ", "MULT", "MINUS", "PRINT", "NEWLINE" ]

    ruleNames = [ "NUMBER", "ID", "WS", "LPAREN", "RPAREN", "COLON", "COMMA", 
                  "DEF", "RETURN", "EQ", "MULT", "MINUS", "PRINT", "NEWLINE" ]

    grammarFileName = "multiplica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


